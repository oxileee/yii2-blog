<?php

namespace app\models;

use Yii;
use yii\base\InvalidConfigException;
use yii\behaviors\TimestampBehavior;
use yii\data\Pagination;
use yii\db\ActiveQuery;
use yii\db\ActiveRecord;
use yii\db\BaseActiveRecord;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "article".
 *
 * @property int $id
 * @property string|null $title
 * @property string|null $description
 * @property string|null $content
 * @property string|null $date
 * @property string|null $image
 * @property int|null $viewed
 * @property int|null $user_id
 * @property int|null $status
 * @property int|null $category_id
 *
 * @property Comment[] $comments
 */

class Article extends ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName(): string
    {
        return 'article';
    }

    /**
     * {@inheritdoc}
     */
    public function rules(): array
    {
        return [
            [['title'], 'required'],
            [['title', 'description', 'content'], 'string'],
            [['date'], 'safe']
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels(): array
    {
        return [
            'id' => 'ID',
            'title' => 'Title',
            'description' => 'Description',
            'content' => 'Content',
            'date' => 'Date',
            'image' => 'Image',
            'viewed' => 'Viewed',
            'user_id' => 'User ID',
            'status' => 'Status',
            'category_id' => 'Category ID',
        ];
    }

    public function behaviors(): array
    {
        return [
            [
                'class' => TimestampBehavior::class,
                'attributes' => [
                    BaseActiveRecord::EVENT_BEFORE_INSERT => ['date'],
                ],
                'value' => date('Y-m-d'),
            ]
        ];
    }

    public function saveImage($filename): bool
    {
        $this->image = $filename;
        return $this->save(false);
    }

    public function getImage(): string
    {
        return ($this->image) ? '/uploads/' . $this->image : '/no-image.jpg';
    }

    public function deleteImage(): void
    {
        $imageUploadModel = new ImageUpload();
        $imageUploadModel->deleteCurrentImage($this->image);
    }

    public function beforeDelete(): bool
    {
        $this->deleteImage();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function getCategory(): ActiveQuery
    {
        return $this->hasOne(Category::class, ['id' => 'category_id']);
    }

    public function saveCategory($category_id): bool
    {
        $category = Category::findOne($category_id);
        if ($category !== null) {
            $this->category_id = $category->id;
            return $this->save(false);
        }
        return true;
    }

    /**
     * @throws InvalidConfigException
     */
    public function getTags(): ActiveQuery
    {
        return $this->hasMany(Tag::class, ['id' => 'tag_id'])
            ->viaTable('article_tag', ['article_id' => 'id']);
    }

    /**
     * @throws InvalidConfigException
     */
    public function getSelectedTags(): array
    {
        $selectedTags = $this->getTags()->select('id')->asArray()->all();
        return ArrayHelper::getColumn($selectedTags, 'id');
    }

    public function saveTags($tags): void
    {
        if (is_array($tags)) {
            $this->clearCurrentTags();

            foreach ($tags as $tag_id) {
                $tag = Tag::findOne($tag_id);
                $this->link('tags', $tag);
            }
        }
    }

    public function clearCurrentTags(): void
    {
        ArticleTag::deleteAll(['article_id' => $this->id]);
    }

    public static function getAll($pageSize = 5): array
    {
        $query = self::find();
        $countQuery = clone $query;
        $pagination = new Pagination(['totalCount' => $countQuery->count(), 'pageSize' => $pageSize]);
        $articles = $query->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();

        return [
            'articles' => $articles,
            'pagination' => $pagination,
        ];
    }

    public static function getPopular(): array
    {
        return self::find()->orderBy('viewed desc')->limit(3)->all();
    }

    public static function getRecent(): array
    {
        return self::find()->orderBy('date asc')->limit(4)->all();
    }

    public function saveArticle(): bool
    {
        $this->user_id = Yii::$app->user->id;
        return $this->save(false);
    }

    public function getComments(): ActiveQuery
    {
        return $this->hasMany(Comment::class, ['article_id' => 'id']);
    }

    public function getArticleComments(): array
    {
        return $this->getComments()->where(['status' => 1])->all() ?? [];
    }

    public function getUser(): ActiveQuery
    {
        return $this->hasOne(User::class, ['id' => 'user_id']);
    }

    public function viewedCounter(): bool
    {
        ++$this->viewed;
        return $this->save(false);
    }

    /**
     * @return string|null
     */
    public function getDate(): ?string
    {
        return $this->date;
    }
}
